services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - xpack.security.audit.enabled=true
      - ELASTIC_PASSWORD=elastic_password123 # Change this password
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      #- "./elastic/config:/usr/share/elasticsearch/config"
      - "./elastic/config/service_tokens:/usr/share/elasticsearch/config/service_tokens"

      # Disabilitato, d√† errore? E poi forse voglio il db vuoto ad ogni riavvio.
      #- ./elastic/elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail elasticsearch:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 3
    #networks:
    #  - elk

  kibana:
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      #- ELASTICSEARCH_USERNAME="elastic"
      #- ELASTICSEARCH_PASSWORD=elastic_password123 # Same as Elasticsearch
      - ELASTICSEARCH_SERVICEACCOUNTTOKEN=AAEAAWVsYXN0aWMva2liYW5hL2VsYXN0aWMta2liYW5hLXRva2VuOjMwclV3THZjUWw2aW54WDFDX3RmX3c
    ports:
      - "5601:5601"
    #networks:
    #  - elk
    healthcheck:
      test: ["CMD-SHELL", "curl -s -I http://localhost:5601 | grep -q '302 Found'"]
      interval: 10s
      timeout: 10s
      retries: 3
    depends_on:
      elasticsearch:
        condition: service_healthy

  logstash:
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    container_name: logstash
    environment:
      - LS_JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro,Z
      #- ./logstash/config/jvm.options:/usr/share/logstash/config/jvm.options:ro,Z
    ports:
      - "5044:5044"
      - "9600:9600"
    #networks:
    #  - elk
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Va messo nella "casa"
  #filebeat:
  #  image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
  #  container_name: filebeat
  #  user: root
  #  volumes:
  #    - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
  #  depends_on:
  #    - elasticsearch
    #networks:
    #  - elk
  
  kafka-broker:
    image: apache/kafka:latest
    container_name: kafka-broker
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://kafka-broker:9092,CONTROLLER://kafka-broker:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-broker:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    #ports:
    #  - "9092:9092"
    #  - "9093:9093"
  
  house:
    #container_name: house
    build:
      context: house
      args:
        - STACK_VERSION=${STACK_VERSION}
    deploy:
      replicas: ${HOUSES}
    depends_on:
      elasticsearch:
        condition: service_healthy
      startup-elastic:
        condition: service_completed_successfully
      startup-kibana:
        condition: service_completed_successfully
  
  startup-elastic:
    build: startup-elastic
    depends_on:
      elasticsearch:
        condition: service_healthy
  
  startup-kibana:
    build: startup-kibana
    depends_on:
      kibana:
        condition: service_healthy


#volumes:
#  elasticsearch-data:
#    driver: local

#networks:
#  elk:
#    driver: bridge
